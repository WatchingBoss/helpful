* Interface
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :config
    (load-theme 'monokai t))

  (set-face-foreground 'font-lock-comment-face "#969696")
#+END_SRC
** Window modes
#+BEGIN_SRC emacs-lisp
  (setq-default menu-bar-mode nil
				tool-bar-mode nil
				scroll-bar-mode nil)
#+END_SRC
** Mode line
#+BEGIN_SRC emacs-lisp
  (setq-default column-number-mode t
				size-indication-mode t
				display-time-mode t
				display-time-default-load-average t)
#+END_SRC
** Welcome screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
** Line definition
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
  (set-face-background 'hl-line "#333333")
  (set-face-foreground 'highlight nil)
  (set-face-attribute hl-line-face nil :underline nil)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Liberation Mono 11"))
  (set-face-attribute 'default t :font "Liberation Mono 11")
#+END_SRC

* Emacs behavior
** Backup and autosave
#+BEGIN_SRC emacs-lisp
  (setq-default backup-inhibited t
				auto-save-default nil)
#+END_SRC
** Auto revert buffer
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
  (add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC
** Save to clibboard
#+BEGIN_SRC emacs-lisp
  (setq-default x-select-enable-clipboard-manager nil)
#+END_SRC

* Environment
** Winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
  (windmove-default-keybindings)
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t
	:config
	(which-key-mode)
	)
#+END_SRC
** Helm
*** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
	:demand
	:diminish helm-mode
	:bind (("M-x"     . helm-M-x)
		   ("M-y"     . helm-show-kill-ring)
		   ("C-x c"   . helm-semantic-or-imenu)
		   ("C-x b"   . helm-mini)
		   ("C-c s"   . helm-occur)
		   ("C-x C-f" . helm-find-files)
		   ("C-x C-b" . helm-buffers-list)
		   ("C-x r l" . helm-bookmarks)
		   ;; :map helm-find-files-map
		   ;; ("C-<tab>" . helm-execute-persistent-action)
		   )
	:custom
	(helm-lisp-fuzzy-completion t)
	(helm-candidate-number-limit 100)
	(helm-exit-idle-delay 0)

	(helm-buffers-fuzzy-matching t)
	(helm-M-x-fuzzy-match t)
	(helm-locate-fuzzy-match t)
	(helm-recentf-fuzzy-match t)
	(helm-apropos-fuzzy-match t)

	(helm-ff-file-name-history-use-reverntf t)
	(helm-quick-update t)

	;; Resize helm according to number of results within min/max height
	(helm-autoresize-min-height 10)
	(helm-autoresize-max-height 40)
	(helm-autoresize-mode t)
	:config
	(progn
	  ;; Enhance the help menu using helm functionality.
	  (define-key 'help-command (kbd "a") 'helm-apropos)
	  (define-key 'help-command (kbd "r") 'helm-info-emacs)
	  (define-key 'help-command (kbd "C-l") 'helm-locate-library)
	  (define-key 'help-command (kbd "SPC") 'helm-all-mark-rings)
	  )
	)
#+END_SRC
*** Helm-swoop
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
	:requires helm
	:bind (("C-s" . 'helm-swoop)
		   ("C-S-s" . 'helm-swoop-without-pre-input)
		   ("C-c M-i" . 'helm-multi-swoop)
		   ("C-x M-i" . 'helm-multi-swoop-all)
		   )
	:custom
	(helm-swoop-use-line-number-face t)
	(helm-swoop-move-line-cycle t)
	)
#+END_SRC
*** Helm-ls-git
#+BEGIN_SRC emacs-lisp
  (use-package helm-ls-git
	:ensure t
	:bind (("C-<f6>" . 'helm-ls-git-ls))
	)
#+END_SRC
*** Helm-flx
#+BEGIN_SRC emacs-lisp
  (use-package flx)
  (use-package helm-flx
	:requires flx
	:config
	(helm-flx-mode +1)
	)
#+END_SRC
*** Helm-system-packages
	Interface to the package manager of operating system
#+BEGIN_SRC emacs-lisp
  (use-package helm-system-packages)
#+END_SRC
** Neotree
#+BEGIN_SRC elisp
  (use-package neotree
	:ensure t
	:bind ("<f8>" . 'neotree-toggle)
	:custom
	(inhibit-compacting-font-caches t)
	(neo-theme (if (display-graphic-p) 'icons 'arrow))
	(neo-smart-open t)
	(neo-show-hidden-files t)
	)
#+END_SRC
* Typing text
** Russian layout keys
#+BEGIN_SRC emacs-lisp
  (use-package reverse-im
	:ensure t
	:config
	(reverse-im-activate "russian-computer")
	)

  (setq default-input-method "cyrillic-jis-russian")
#+END_SRC
** Move line
   Move line
   M-<up> and M-<down>
#+BEGIN_SRC emacs-lisp
  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (setq col (current-column))
    (beginning-of-line) (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))

  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
	:ensure t
	:config
	(progn
	  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
	  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
	  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
	  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
	  (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)	
	  )
	)
#+END_SRC

** Line truncate
#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines t)
#+END_SRC
** Hungry delte
   Delete all blank space before any symbol
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
	:ensure t
	:config
	(global-hungry-delete-mode)
	)
#+END_SRC
** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
	:ensure t
	:config
	(global-set-key (kbd "C-=") 'er/expand-region)
	)
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
	:ensure t
	:custom
	(smartparens-global-mode t)
	)
#+END_SRC
* Colored TODO, NOTE
  | Red        | TODO |
  | Dark green | NOTE |

#+BEGIN_SRC emacs-lisp
  ;; Bright-red TODOs
  (setq fixme-modes '(c++-mode c-mode emacs-lisp-mode))
  (make-face 'font-lock-fixme-face)
  (make-face 'font-lock-note-face)
  (mapc (lambda (mode)
	  (font-lock-add-keywords
	   mode
	   '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
	     ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
	fixme-modes)
  (modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
  (modify-face 'font-lock-note-face "Dark Green" nil nil t nil t nil nil)
#+END_SRC
* Code
** Comments
#+BEGIN_SRC emacs-lisp
  (dolist (hooks '(c-mode-hook
		   c++-mode-hook
		   java-mode-hook
		   csharp-mode-hok))
    (add-hook hooks (lambda () (setq comment-start "// "
				     comment-end "")))
    )
#+END_SRC
** Configs
#+BEGIN_SRC emacs-lisp
  (add-hook 'conf-mode-hook (lambda () (setq indent-tabs-mode t)))
#+END_SRC
** Clang-format
#+BEGIN_SRC emacs-lisp
  (use-package clang-format
	:ensure t
	:config
	(progn
	  (dolist (hooks '(c-mode-hook
					   cc-mode-hook
					   c++-mode-hook
					   csharp-mode-hook
					   java-mode-hook
					   javascript-mode-hook))
		(add-hook hooks (lambda () (local-set-key (kbd "C-M-\\") #'clang-format-region)))
		(add-hook hooks (lambda () (local-set-key (kbd "C-M-|") #'clang-format-buffer)))
		;; (add-hook hooks (lambda () (add-hook 'before-save-hook #'clang-format-buffer)))
		)
	  )
	)
#+END_SRC
* Languages
** Common
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4
				indent-tabs-mode t
				electric-pair-mode t)
#+END_SRC
** C/C++
*** .h is c++-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist ' ("\\.h\\'" . c++-mode))
#+END_SRC
*** cc-mode style
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :bind (:map c-mode-base-map ("C-c c" . compile))
    :hook (c-mode-common . (lambda ()
			     (c-set-style "k&r")
			     (setq c-basic-offset 4)))
    )
#+END_SRC
** C#
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :ensure t
    )
#+END_SRC

** Rust-mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
	:ensure t
	:custom
	(rust-format-on-save t)
	:config
	(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
	)
#+END_SRC
** Go-mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
	:ensure t
	:custom
	(gofmt-command "goimports")
	:config
	(add-hook 'before-save-hook 'gofmt-before-save)
	)
#+END_SRC
** GLSL mode
#+BEGIN_SRC emacs-lisp
  (use-package glsl-mode
	:ensure t
	:commands (glsl-mode)
	:mode (("\\.glsl\\'" . glsl-mode)
		   ("\\.vert\\'" . glsl-mode)
		   ("\\.frag\\'" . glsl-mode)
		   ("\\.geom\\'" . glsl-mode)  
		   )
	)
#+END_SRC
** Markdown-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
	:ensure t
	:commands (markdown-mode gfm-mode)
	:mode (("README\\.md\\'" . gfm-mode)
		   ("\\.md\\'" . markdown-mode)
		   ("\\.markdown\\'" . markdown-mode)
		   )
	:custom
	(markdown-command "pandoc")
	)
#+END_SRC
** CMake
#+BEGIN_SRC elisp
  (if (eq system-type "gnu/linux")
	  (autoload 'cmake-mode "/usr/share/cmake-3.15/editors/emacs/cmake-mode.el" t)
	)

  (setq auto-mode-alist
		(append
		 '(("CMakeLists\\.txt\\'" . cmake-mode))
		 '(("\\.cmake\\'" . cmake-mode))
		 auto-mode-alist))
#+END_SRC
* Utility
** Ox-pandoc
   Exporter that translates Org-mode file to various other formats via Pandoc
#+BEGIN_SRC emacs-lisp
  (use-package ox-pandoc
	:ensure t
	:config
	;; default options for all output formats
	(setq org-pandoc-options '((standalone . t)))
	;; cancel above settings only for 'docx' format
	(setq org-pandoc-options-for-docx '((standalone . nil)))
	;; special settings for beamer-pdf and latex-pdf exporters
	(setq org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex")))
	(setq org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex")))
	;; special extensions for markdown_github output
	(setq org-pandoc-format-extensions '(markdown_github+pipe_tables+raw_html))
	)
#+END_SRC
** Ox-hugo
   Org exporter back-end for Hugo
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
	:ensure t
	:after ox
	)
#+END_SRC
** Rg
	Ripgrep
#+BEGIN_SRC emacs-lisp
  (use-package rg
	:ensure t
	:bind (("C-c R" . rg))
	)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
	:commands magit-get-top-dir
	:bind (("C-c g" . magit-status)
		   ("C-c C-g l" . magit-file-log)
		   ("C-c f" . magit-grep))
	:init
	(progn
	  ;; magit extensions
	  (use-package magit-blame
		:bind ("C-c C-g b" . magit-blame-mode))

	  ;; we no longer need vc-git
	  (delete 'Git vc-handled-backends)
	  ;; make magit status go full-screen but remember previous window
	  ;; settings
	  ;; from: http://whattheemacsd.com/setup-magit.el-01.html
	  (defadvice magit-status (around magit-fullscreen activate)
		(window-configuration-to-register :magit-fullscreen)
		ad-do-it
		(delete-other-windows))

	  ;; Close popup when commiting - this stops the commit window
	  ;; hanging around
	  ;; From: http://git.io/rPBE0Q
	  (defadvice git-commit-commit (after delete-window activate)
		(delete-window))

	  (defadvice git-commit-abort (after delete-window activate)
		(delete-window))

	  ;; these two force a new line to be inserted into a commit window,
	  ;; which stops the invalid style showing up.
	  ;; From: http://git.io/rPBE0Q
	  (defun magit-commit-mode-init ()
		(when (looking-at "\n")
		  (open-line 1)))

	  (add-hook 'git-commit-mode-hook 'magit-commit-mode-init))
	:config
	(progn
	  ;; restore previously hidden windows
	  (defadvice magit-quit-window (around magit-restore-screen activate)
		(let ((current-mode major-mode))
		  ad-do-it
		  ;; we only want to jump to register when the last seen buffer
		  ;; was a magit-status buffer.
		  (when (eq 'magit-status-mode current-mode)
			(jump-to-register :magit-fullscreen))))

	  (defun magit-maybe-commit (&optional show-options)
		"Runs magit-commit unless prefix is passed"
		(interactive "P")
		(if show-options
			(magit-key-mode-popup-committing)
		  (magit-commit)))

	  (define-key magit-mode-map "c" 'magit-maybe-commit)

	  ;; major mode for editing `git rebase -i` files
	  (use-package rebase-mode)

	  ;; magit settings
	  (setq
	   ;; use ido to look for branches
	   magit-completing-read-function 'magit-ido-completing-read
	   ;; don't put "origin-" in front of new branch names by default
	   magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
	   ;; open magit status in same window as current buffer
	   magit-status-buffer-switch-function 'switch-to-buffer
	   ;; highlight word/letter changes in hunk diffs
	   magit-diff-refine-hunk t
	   ;; ask me if I want to include a revision when rewriting
	   magit-rewrite-inclusive 'ask
	   ;; ask me to save buffers
	   magit-save-some-buffers t
	   ;; pop the process buffer if we're taking a while to complete
	   magit-process-popup-time 10
	   ;; ask me if I want a tracking upstream
	   magit-set-upstream-on-push 'askifnotset
	   )
	  )
	)
#+END_SRC
* Programming
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company-statistics
	:config
	(setq company-statistics-file
		  (expand-file-name "~/.emacs.d/company-statistics-cache.el"))
	)

  (use-package company
	:ensure t
	:requires company-statistics
	:custom
	(company-minimun-prefix-length 3)
	(company-dabbrev-downcase nil)
	:config
	(add-hook 'after-init-hook 'global-company-mode)
	:bind (:map company-active-map
				("M-d" . company-show-doc-buffer)
				("M-l" . company-show-location)
				("M-n" . company-select-next)
				("M-p" . company-select-previous)
				("TAB" . company-complete)
		   )
	)
#+END_SRC
** Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
	:ensure t
	:config
	(add-hook 'sgml-mode-hook 'emmet-mode)
	(add-hook 'css-mode-hook ' emmet-mode)
	(add-hook 'web-mode-hook ' emmet-mode))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
	:ensure t
	:init (global-flycheck-mode t)
	:custom
	(flycheck-python-pylint-executable 'pylint)
	(flycheck-disabled-checkers '(emacs-lisp-checkdoc))
	)
#+END_SRC
* Org-mode
** Config org mode
   Activation org mode
   Definition global keys
#+BEGIN_SRC emacs-lisp
  (use-package org
	:bind (("C-c a" . org-agenda)
		   ("C-c b" . org-iswitchb)
		   ("C-c c" . org-capture)
		   ("C-c l" . org-store-link)
		   )
	:custom
	(org-directory "~/Dropbox/orgnotes/")
	(org-agenda-files "~/Dropbox/orgnotes/")
	(org-default-notes-file "~/Dropbox/orgnotes/notes.org")
	(org-log-done t)

	(org-babel-check-confirm-evaluate nil)
	(org-babel-confirm-evaluate nil)
	(org-confirm-babel-evaluate nil)
	)
#+END_SRC
** Org-babel
#+BEGIN_SRC emacs-lisp
  (require 'ob-emacs-lisp)
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
		   (python . t)
		   (latex . t)
		   )))
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-bullets
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  ;;   )
  ;; (set-default org-bullets-mode nil)
#+END_SRC
** htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
	:commands (htmlize-buffer
			   htmlize-file
			   htmlize-many-files
			   htmlize-many-files-dired
			   htmlize-region
			   )
	)
#+END_SRC
* My functions
** Org to html
#+BEGIN_SRC emacs-lisp
  (defun current-org-to-html (file)
	"Convert org file to html"

	(save-excursion
	  (find-file file)
	  (org-html-export-to-html)
	  (write-file file)
	  (kill-buffer (current-buffer))
	  )
	)

  (defun all-orgs-to-htmls-in-dir (dir)
	"Convert all org files in current directory and stores them in
  separate directory"

	(setq html-dir (concat dir "html/"))

	(if (not (file-exists-p html-dir)) (dired-create-directory html-dir))

	(mapc 'delete-file
		  (directory-files html-dir t ".html$"))

	(mapc 'current-org-to-html
		  (directory-files dir t ".org$"))

	(mapc (lambda (file)
			(rename-file file html-dir))
		  (directory-files dir t ".html$"))
	)

  (defun all-org-to-htmls ()
	"Convert all org to html"
	(interactive)
	(all-orgs-to-htmls-in-dir (expand-file-name "~/Dropbox/orgnotes/"))
	(all-orgs-to-htmls-in-dir (expand-file-name "~/Dropbox/learn/"))
	(all-orgs-to-htmls-in-dir (expand-file-name "~/Dropbox/orgnotes/goals/"))
	)
#+END_SRC
