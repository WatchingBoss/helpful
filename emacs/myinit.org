* Interface tweaks
** Theme
   #+BEGIN_SRC emacs-lisp
(load-theme 'wombat)
   #+END_SRC
** Window modes
#+BEGIN_SRC emacs-lisp

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

#+END_SRC

** Hide welcome screen
   #+BEGIN_SRC emacs-lisp

(setq inhibit-startup-screen t)

   #+END_SRC
* Disable backup and autosave
  #+BEGIN_SRC emacs-lisp

(setq backup-inhibited t)
(setq auto-save-default nil)

  #+END_SRC
* Font
#+BEGIN_SRC emacs-lisp

(add-to-list 'default-frame-alist '(font . "Liberation Mono 11"))
(set-face-attribute 'default t :font "Liberation Mono 11")

#+END_SRC

* Controll in code
** Tab width 4 colons
   Set default tab char's display width to 4 spaces
   Set current buffer's tab char's display width ot 4 spaces
   #+BEGIN_SRC emacs-lisp
		
(setq-default tab-width 4)
(setq tab-width 4)

   #+END_SRC
** C default style "lynux"
   For c-mode style "linux"
   #+BEGIN_SRC emacs-lisp

(setq c-default-style "linux"
	  c-basic-offset 4)

   #+END_SRC

** Tab works how \t
   We can use for \t although C-i
   #+BEGIN_SRC emacs-lisp

;(defun my-insert-tab-char ()
;  "Insert a tab char. (ASCII 9, \t)"
;  (interactive)
;  (insert "\t"))
;(global-set-key (kbd "TAB") 'my-insert-tab-char) ; same as Ctrl+i

   #+END_SRC

** Add to auto mode alist .h of c-mode
   I don't know what is it))
   #+BEGIN_SRC emacs-lisp

(add-to-list 'auto-mode-alist ' ("\\.h\\'" . c-mode))

   #+END_SRC

** Open brace after function name without \t

   #+BEGIN_SRC emacs-lisp

(defun my-c-mode-hook ()
  (c-set-offset 'substatement-open 0))
(add-hook 'c-mode-hook 'my-c-mode-)

   #+END_SRC

** \t before case inside switch
   #+BEGIN_SRC emacs-lisp

(c-set-offset 'case-label '+)

   #+END_SRC
** Move line
   Use M-<up> and M-<down> to move lines
   #+BEGIN_SRC emacs-lisp

(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)

   #+END_SRC

** conf-mode-hook tabs
   #+BEGIN_SRC emacs-lisp

(add-hook 'conf-mode-hook
(lambda ()
(setq indent-tabs-mode t)))

   #+END_SRC
* Color for TODO, NOTE
  #+BEGIN_SRC emacs-lisp

;; Bright-red TODOs
(setq fixme-modes '(c++-mode c-mode emacs-lisp-mode))
(make-face 'font-lock-fixme-face)
(make-face 'font-lock-note-face)
(mapc (lambda (mode)
		(font-lock-add-keywords
		 mode
		 '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
		   ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
	  fixme-modes)
(modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "Dark Green" nil nil t nil t nil nil)

  #+END_SRC

* Line definition
#+BEGIN_SRC emacs-lisp

(global-hl-line-mode 1)
(set-face-background 'hl-line "#333333")
(set-face-foreground 'highlight nil)
(set-face-attribute hl-line-face nil :underline nil)

#+END_SRC

* Comments

  I want make usefull comments
  #+BEGIN_SRC emacs-lisp

;(defun my/c-indent-or-tab-in-comment ()
;  (interactive)
;  (if (nth 4 (syntax-ppss))
;	  (insert "\t")
;	(call-interactively 'indent-for-tab-command)))

  #+END_SRC

* Org mode
  Activation org mode
  Definition global keys
  #+BEGIN_SRC emacs-lisp

(require 'org)

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switch)
(setq org-log-done t)

  #+END_SRC
* Packages
** Try
   Provides use package without installing
   #+BEGIN_SRC emacs-lisp

(use-package try
  :ensure t)

   #+END_SRC
** Which key
   Show help about keys
   #+BEGIN_SRC emacs-lisp

(use-package which-key
  :ensure t
  :config (which-key-mode))

   #+END_SRC

** Auto complete
   #+BEGIN_SRC emacs-lisp

(use-package auto-complete
  :ensure t
  :init
  (progn
	(ac-config-default)
	(global-auto-complete-mode t)
	))

   #+END_SRC

** Yasnippet-snippets
   #+BEGIN_SRC emacs-lisp


;;(add-to-list 'load-path
;;			 "~/.emacs.d/elpa/yasnippet")
;;(use-package yasnippet-snippets
;;  :ensure t
;;  :init
;;  (progn
;;	(yas-global-mode 1)
;;	))

   #+END_SRC

** Multiple cursors
   #+BEGIN_SRC emacs-lisp

(use-package multiple-cursors
  :ensure t
  :init
  (progn
	(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
	(global-set-key (kbd "C->") 'mc/mark-next-like-this)
	(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
	(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
	(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)	
	 ))

   #+END_SRC

** Org bullets
   #+BEGIN_SRC emacs-lisp

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

   #+END_SRC

** Swiper and counsel
   Change standard using console and search
   #+BEGIN_SRC emacs-lisp

(use-package counsel
  :ensure t
  )
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
		 ("C-r" . swiper)
		 ("C-c C-r" . ivy-resume)
		 ("M-x" . counsel-M-x)
		 ("C-x C-f" . counsel-find-file))
  :config
  (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq enable-recursive-minibuffers t)
;	(global-set-key (kbd "<f6>") 'ivy-resume)
;	(global-set-key (kbd "<f1> f") 'counsel-describe-function)
;	(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;	(global-set-key (kbd "<f1> l") 'counsel-find-library)
;	(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;	(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;	(global-set-key (kbd "C-c g") 'counsel-git)
;	(global-set-key (kbd "C-c j") 'counsel-git-grep)
;	(global-set-key (kbd "C-c k") 'counsel-ag)
;	(global-set-key (kbd "C-x l") 'counsel-locate)
;	(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
	))

   #+END_SRC

** PHP-mode
   #+BEGIN_SRC emacs-lisp

(use-package php-mode
:ensure t
:config
(add-hook 'php-mode-hook
'(lambda () (define-abbrev php-mode-abbrev-table "ex" "extends")))
(add-hook 'php-mode-hook
'(lambda ()
(setq indent-tabs-mode t)
(c-basic-offset 2)
(setq tab-width 4)))
)
   #+END_SRC

** Web-mode
   #+BEGIN_SRC emacs-lisp

;(use-package web-mode
;:ensure t
;:init
;(progn
;(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.sass?\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.xml?\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
;))
   #+END_SRC

** Emmet
   #+BEGIN_SRC emacs-lisp

(use-package emmet-mode
:ensure t
:init
:config
(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook ' emmet-mode))

   #+END_SRC

** 
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

* Comfortable using
** ido
   #+BEGIN_SRC emacs-lisp

(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

   #+END_SRC
** Buffer
   #+BEGIN_SRC emacs-lisp

;;(defalias 'list-buffers 'ibuffer-other-window)

   #+END_SRC

** Winner mode 
   Use C-<left>, C-<right>
   Use S-<up>, S-<right>, S-<down>, S-<left>
   #+BEGIN_SRC emacs-lisp

(winner-mode 1)
(windmove-default-keybindings)

   #+END_SRC

